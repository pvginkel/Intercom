#include "includes.h"

#include "Device.h"

void Device::begin() {
    /* Setp 1: Determine the I2S channel configuration and allocate two channels one by one
     * The default configuration can be generated by the helper macro,
     * it only requires the I2S controller id and I2S role
     * The tx and rx channels here are registered on different I2S controller,
     * Except ESP32 and ESP32-S2, others allow to register two separate tx & rx channels on a same controller */
    i2s_chan_config_t tx_chan_cfg = I2S_CHANNEL_DEFAULT_CONFIG(I2S_NUM_0, I2S_ROLE_MASTER);
    ESP_ERROR_CHECK(i2s_new_channel(&tx_chan_cfg, &_tx_chan, NULL));
    i2s_chan_config_t rx_chan_cfg = I2S_CHANNEL_DEFAULT_CONFIG(I2S_NUM_1, I2S_ROLE_MASTER);
    ESP_ERROR_CHECK(i2s_new_channel(&rx_chan_cfg, NULL, &_rx_chan));

    /* Step 2: Setting the configurations of standard mode and initialize each channels one by one
     * The slot configuration and clock configuration can be generated by the macros
     * These two helper macros is defined in 'i2s_std.h' which can only be used in STD mode.
     * They can help to specify the slot and clock configurations for initialization or re-configuring */
    i2s_std_config_t tx_std_cfg = {
        .clk_cfg = I2S_STD_CLK_DEFAULT_CONFIG(16000),
        .slot_cfg = I2S_STD_MSB_SLOT_DEFAULT_CONFIG(I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_MONO),
        .gpio_cfg =
            {
                .mclk = I2S_GPIO_UNUSED,  // some codecs may require mclk signal, this example doesn't need it
                .bclk = (gpio_num_t)CONFIG_DEVICE_SPEAKER_SCK_PIN,
                .ws = (gpio_num_t)CONFIG_DEVICE_SPEAKER_WS_PIN,
                .dout = (gpio_num_t)CONFIG_DEVICE_SPEAKER_DATA_PIN,
                .din = I2S_GPIO_UNUSED,
                .invert_flags =
                    {
                        .mclk_inv = false,
                        .bclk_inv = false,
                        .ws_inv = false,
                    },
            },
    };
    ESP_ERROR_CHECK(i2s_channel_init_std_mode(_tx_chan, &tx_std_cfg));

    i2s_std_config_t rx_std_cfg = {
        .clk_cfg = I2S_STD_CLK_DEFAULT_CONFIG(16000),
        .slot_cfg = I2S_STD_MSB_SLOT_DEFAULT_CONFIG(I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_STEREO),
        .gpio_cfg =
            {
                .mclk = I2S_GPIO_UNUSED,  // some codecs may require mclk signal, this example doesn't need it
                .bclk = (gpio_num_t)CONFIG_DEVICE_MICROPHONE_SCK_PIN,
                .ws = (gpio_num_t)CONFIG_DEVICE_MICROPHONE_WS_PIN,
                .dout = I2S_GPIO_UNUSED,
                .din = (gpio_num_t)CONFIG_DEVICE_MICROPHONE_DATA_PIN,
                .invert_flags =
                    {
                        .mclk_inv = false,
                        .bclk_inv = false,
                        .ws_inv = false,
                    },
            },
    };
    /* Default is only receiving left slot in mono mode,
     * update to right here to show how to change the default configuration */
    // rx_std_cfg.slot_cfg.slot_mask = I2S_STD_SLOT_RIGHT;
    ESP_ERROR_CHECK(i2s_channel_init_std_mode(_rx_chan, &rx_std_cfg));

    xTaskCreate([](void *param) { ((Device *)param)->write_task(); }, "i2s_write_task", 4096, this, 5, nullptr);
    xTaskCreate([](void *param) { ((Device *)param)->read_task(); }, "i2s_read_task", 4096, this, 5, nullptr);
}

#define EXAMPLE_BUFF_SIZE 2048
#define SAMPLE_RATE 16000
#define FREQUENCY 300
#define AMPLITUDE 1400  // Amplitude for 16-bit PCM

void Device::read_task() {
    uint8_t *r_buf = (uint8_t *)calloc(1, EXAMPLE_BUFF_SIZE);
    assert(r_buf);  // Check if r_buf allocation success
    size_t r_bytes = 0;

    /* Enable the RX channel */
    ESP_ERROR_CHECK(i2s_channel_enable(_rx_chan));

    /* ATTENTION: The print and delay in the read task only for monitoring the data by human,
     * Normally there shouldn't be any delays to ensure a short polling time,
     * Otherwise the dma buffer will overflow and lead to the data lost */
    while (1) {
        /* Read i2s data */
        if (i2s_channel_read(_rx_chan, r_buf, EXAMPLE_BUFF_SIZE, &r_bytes, 1000) == ESP_OK) {
            printf("Read Task: i2s read %d bytes\n-----------------------------------\n", r_bytes);
            printf("[0] %x [1] %x [2] %x [3] %x\n[4] %x [5] %x [6] %x [7] %x\n\n", r_buf[0], r_buf[1], r_buf[2],
                   r_buf[3], r_buf[4], r_buf[5], r_buf[6], r_buf[7]);
        } else {
            printf("Read Task: i2s read failed\n");
        }
        vTaskDelay(pdMS_TO_TICKS(200));
    }
    free(r_buf);
    vTaskDelete(NULL);
}

void Device::write_task() {
    // Allocate buffer for sine wave samples (16-bit mono)
    uint8_t *w_buf = (uint8_t *)calloc(1, EXAMPLE_BUFF_SIZE);
    assert(w_buf);

    // Calculate the number of samples in the buffer.
    int num_samples = EXAMPLE_BUFF_SIZE / 2;  // each sample is 2 bytes

    // Sine wave parameters.
    double phase = 0.0;
    double phase_increment = 2.0 * M_PI * FREQUENCY / SAMPLE_RATE;

    size_t w_bytes = EXAMPLE_BUFF_SIZE;

    // Optionally preload DMA buffers (if your use-case requires it).
    while (w_bytes == EXAMPLE_BUFF_SIZE) {
        int16_t *samples = (int16_t *)w_buf;
        for (int i = 0; i < num_samples; i++) {
            samples[i] = (int16_t)(AMPLITUDE * sin(phase));
            phase += phase_increment;
            if (phase >= 2.0 * M_PI) {
                phase -= 2.0 * M_PI;
            }
        }
        ESP_ERROR_CHECK(i2s_channel_preload_data(_tx_chan, w_buf, EXAMPLE_BUFF_SIZE, &w_bytes));
    }

    // Enable the TX channel.
    ESP_ERROR_CHECK(i2s_channel_enable(_tx_chan));

    // Continuous write loop without delay or logging.
    while (1) {
        int16_t *samples = (int16_t *)w_buf;
        for (int i = 0; i < num_samples; i++) {
            samples[i] = (int16_t)(AMPLITUDE * sin(phase));
            phase += phase_increment;
            if (phase >= 2.0 * M_PI) {
                phase -= 2.0 * M_PI;
            }
        }
        // Write the entire buffer to the I2S TX channel.
        ESP_ERROR_CHECK(i2s_channel_write(_tx_chan, w_buf, EXAMPLE_BUFF_SIZE, &w_bytes, portMAX_DELAY));
    }

    // Should never reach here, but free the buffer if the task ever exits.
    free(w_buf);
    vTaskDelete(NULL);
}
